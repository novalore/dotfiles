"First of all I want to be sure that syntax highlighting is on all the time...
syntax enable
"Vars
let g:author = "Lorenzo Novaro"
let g:email  = "novalore@19.coop"
let $DOTFILES = expand('~/dotfiles')
"Colors
colorscheme vividchalk
"CursorLine doesn't want to be set, so I have to force it...
autocmd VimEnter * highlight CursorLine cterm=NONE  ctermfg=NONE ctermbg=232
"I'll tell you when I want numbers!
set nu!
"Wrap long lines, but keep words whole
"set wrap lbr
set linebreak
"No newlines on wrapped input
set textwidth=0
set wrapmargin=0
"disable folding
set foldenable!
"but not in php...
let php_folding = 1
"Writing comments in various languages confuses vim's spellchecker
set nospell
"indent-guides and pastel colorthemes are not friends :-/"
UnBundle 'nathanaelkane/vim-indent-guides'
"I want my S key back!
UnBundle 'justinmk/vim-sneak'
set clipboard=unnamedplus
"Open NERDtree files in a new tab
let g:NERDTreeMapOpenInTab='<ENTER>'
"Gemini tpl files are usually full of html tags
autocmd BufRead,BufNewFile *.tpl set filetype=html
"Wrap at 80 chars for Markdown, Text, Commits
autocmd BufRead,BufNewFile *.md setlocal textwidth=80
autocmd BufRead,BufNewFile *.txt setlocal textwidth=80
autocmd FileType gitcommit setlocal textwidth=80
"Default behaviour seems rather counterintuintive to me
set splitbelow " Vertical splits open to the right of the current file
set splitright " Horizontal splits open below current file
"let g:ProjTags = [ "/var/www/besweb.dev" ]
"**************************************
" Vim-template plugin
" https://github.com/naoina/dot-files/
"**************************************
let g:template_basedir = $DOTFILES . '/templates'
let g:template_files = '**'
let g:template_free_pattern = 'skel-\?'
let g:comment_oneline_only_ft = {
    \ 'python': 1,
    \ 'ruby': 1,
    \ 'sh': 1,
    \ }
autocmd User plugin-template-loaded call s:template_keywords()
function! s:template_keywords()
  let firstline = search("@LICENSE@", "cnW")
  if firstline != 0
    let license = readfile(g:template_basedir . '/LICENSE')
    let lastline = firstline + len(license)
    let type = has_key(g:comment_oneline_only_ft, &ft) ? 'AlignLeft' : 'Sexy'

    %s/@LICENSE@/\=license/ge
    execute firstline . "," . lastline . 'call NERDComment("n", "' . type . '")'
    unlet license
  endif

  %s/@AUTHOR@/\=g:author/ge
  %s/@EMAIL@/\=g:email/ge
  %s/@YEAR@/\=strftime('%Y')/ge
  %s/@FILE@/\=expand('%:t:r')/ge
  %s/@DIRNAME@/\=expand('%:p:h:t')/ge

  call cursor(1, 0)
  if search('<CURSOR>', 'c')
    normal! "_da<zz
  endif
endfunction
"********************************************
" Improving the text displayed in a Vim fold
" http://s.coop/1u541
"********************************************
function! CustomFoldText() "{{{1
    "get first non-blank line
    let fs = v:foldstart
    while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
    endwhile
    if fs > v:foldend
        let line = getline(v:foldstart)
    else
        let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
    endif
    " remove foldmarker from line
    let line = substitute(line, matchstr(&l:cms,
        \ '^.\{-}\ze%s').'\s*'. split(&l:fmr,',')[0].'\s*\d\+', '', '')

    let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
    let foldSize = 1 + v:foldend - v:foldstart
    let foldSizeStr = " " . foldSize . " lines "
    let foldLevelStr = '+'. v:folddashes
    let lineCount = line("$")
    let foldPercentage = printf("[%.1f", (foldSize*1.0)/lineCount*100) . "%] "
    let expansionString = repeat(".", w - strwidth(foldSizeStr.line.foldLevelStr.foldPercentage))
    return line . expansionString . foldSizeStr . foldPercentage . foldLevelStr
endfunction

set foldtext=CustomFoldText()

"Syntastic plugin
let g:syntastic_enable_signs=1
let g:syntastic_php_checkers=['php']
"let g:syntastic_phpcs_conf='--standard=Zend --warning-severity=0'
" Dont jump to the first error
let g:syntastic_auto_jump=0 
let g:syntastic_auto_loc_list=1

"Mutt-related stuff
autocmd FileType mail set spell

"###########################
"Custom aliases and mappings
"###########################
"pastetoggle is on <F12> in spf13, but I use yakuake
"this mapping works as expected (and echoes current state as a bonus!)
nmap <leader>p :setlocal paste! paste?<cr>
"I don't like help on F1, but I love Fkeys
nnoremap <F1> :UndotreeToggle<CR>
nnoremap <F2> :NERDTreeToggle<CR>
nnoremap <F3> :TagbarToggle<CR>
nnoremap <F4> :set invwrap wrap?<CR>
nnoremap <F5> :SyntasticCheck<CR>
" cycle through tabs
nnoremap ,<Tab> :tabnext<CR>
nnoremap ,<S-Tab> :tabprevious<CR>
"; and : live next to each other...
nnoremap ; :

"Change colorscheme if I'm in diff mode
if &diff
    colorscheme peaksea
endif
